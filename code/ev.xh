#include "DefConfig.h"

#include <math.h>
#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <stdint.h>
#include <pthread.h>
#include <sys/time.h>
#include <sched.h>
#include <assert.h>
#include <ctype.h>
#include <inttypes.h>
#include <stdbool.h>
#include <string.h>
#include <netinet/tcp.h>

#if defined(OS_LINUX)
#include <errno.h>
#include <fcntl.h>
#include <netinet/in.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#endif

#include "concurrentqueue.h"
#include "proto/pub.pb.h"
#include "log/easylogging++.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

enum DisType
{
    DISCONNECT_HEART_STOP,
    DISCONNECT_SOCK_CLOSE,
    DISCONNECT_EPOLL_UNKNOW,
    DISCONNECT_READ_WRITE_ERROR,
    DISCONNECT_OVERSIZE_WRITE_BYTE,
    DISCONNECT_OVERSIZE_READ_BYTE
};

typedef int (*cb_read)(size_t len, char* buff);
extern cb_read cb;

//#include <jemalloc/jemalloc.h>

//取是否Eagain
#define getwEagain(x) (((int*)x)[writeEagain])


//取对端FD
#define getwClientFd(x) (((int*)x)[writeFdIndex])

//取剩余待写出的长度
#define getwLeftByteNum(x) (((int*)x)[writeRecIndex])

//取当前Msg长度
#define getwClientByteNum(x) (((int*)x)[writeClientLenIndex])

//取Msg的头指针
#define getwClientBuffer(x) ((char*)(((int*)x)+writeClientLenIndex))

//取写堆长度
#define getwHeapSize(x) (((int*)x)[writeBuffHeapLen])

struct ChannelData
{
    unsigned int uid;
    int fd;
    int msgType = 0;// 0 read 1 write
    unsigned char **read;
    unsigned char **write;
    unsigned char *writeMsgPtr;
    unsigned int heartbeats;
};

#define MAX_FD 65535

#define NET_QUEUE_NUM 1

#define N_BACKLOG 64

#define MAX_BUFF_CNT 40



#define MAXEVENTS 64



static void *bits_join(int hi, int lo);
static int bits_lo(void *ptr);

static int bits_hi(void *ptr);

static int EpollMod(int epoll_fd, int fd, int events);

static int EpollDel(int epoll_fd, int fd, int events);

static void set_nonblocking(int fd);

int hardWork();

void onDisconnect(int fd, DisType disType);

int sendMsg(int fd, unsigned char *msg);

unsigned char *makeBigFile(const char *ptr, int len);
static void *thread2();
static void *thread3(void *bits);

#define getClientFd(x) (((int*)x)[fdIndex])
#define getLeftByteNum(x) (((int*)x)[recIndex])
#define getClientByteNum(x) (((int*)x)[clientLenIndex])
#define getClientBuffer(x) ((char*)(((int*)x)+clientLenIndex))
#define getHeapSize(x) (((int*)x)[buffHeapLen])

static int writePack(int &id, int &ffd,
                     unsigned char *&item, unsigned char **&readPtr,
                     unsigned char *&witem, unsigned char **&writePtr,
                     unsigned char *&writeMsgPtr, int removeEagain);

int makeMessage(int ffd, int number, google::protobuf::Message *msg);
inline google::protobuf::Message *createMessage(const std::string &type_name);

int heartbeats(int ffd, google::protobuf::Message *protoMsg);

int onRead(int ffd, void *buff, int len);

static int readPack(int &id, int &ffd,
                    unsigned char *&item, unsigned char **&readPtr,
                    unsigned char *&witem, unsigned char **&writePtr);

static void readSockThread(int id);


void rolloutHandler(const char *filename, std::size_t size);

void threadHeartBeatsCheckFunc();

int create();

int connect(const char * ip, const short port);

int bindip(const char * ip, const short port);

int listen();

int send();

int loop();